services:
    file-upload-service:
        build:
            context: ./services/file_upload_service
            dockerfile: Dockerfile
        restart: unless-stopped

        ports:
            - "8080:8080"
        environment:
            DEBUG_MODE: ${DEBUG_MODE}
            S3_BUCKET: files
            S3_REGION: us-east-1
            MINIO_SERVER_URL: ${MINIO_SERVER_URL}
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_interval: 10s

        depends_on:
            minio:
                condition: service_healthy
            auth_service:
                condition: service_healthy
            kafka:
                condition: service_healthy


    auth_service:
        build:
            context: ./services/auth_service
            dockerfile: Dockerfile
        restart: unless-stopped
        ports:
            - "8000:8000"
        environment:
            DEBUG_MODE: ${DEBUG_MODE}
            AUTH_SERVICE_WORKERS: ${AUTH_SERVICE_WORKERS}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            RSA_PUBLIC_KEY: ${RSA_PUBLIC_KEY}
            RSA_PRIVATE_KEY: ${RSA_PRIVATE_KEY}
            REDIS_PASSWORD: ${REDIS_PASSWORD}

        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_interval: 20s

        depends_on:
            redis:
                condition: service_healthy
            postgres:
                condition: service_healthy
            kafka:
                condition: service_healthy

    minio:
        image: minio/minio
        restart: unless-stopped
        ports:
            - "9000:9000" # API
            - "9001:9001" # UI

        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

        volumes:
            - ./minio-data:/data

        command: [ "server", "--console-address", ":9001", "/data" ]

        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
            interval: 30s
            timeout: 20s
            retries: 3
            start_interval: 20s

    postgres:
        image: postgres:latest
        restart: unless-stopped
        ports:
            - "5432:5432"
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}

        volumes:
            - ./postgres_data:/var/lib/postgresql/data

        healthcheck:
            test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
            interval: 10s
            timeout: 3s
            retries: 3
            start_interval: 10s

    redis:
        image: redis:latest
        restart: unless-stopped
        ports:
            - "6379:6379"
        volumes:
            - ./redis_data:/data

        command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]
        healthcheck:
            test: [ "CMD", "redis-cli", "-u", "redis://:${REDIS_PASSWORD}@localhost:6379", "ping" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_interval: 20s

    kafka:
        image: apache/kafka:latest
        restart: unless-stopped
        ports:
            - "9092:9092"
            - "9093:9093"

        environment:
            CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
            KAFKA_BROKER_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 3
            KAFKA_LOG_DIRS: /var/lib/kafka/data

        volumes:
            - ./kafka-data:/var/lib/kafka/data

        healthcheck:
            test: [ "CMD", "/opt/kafka/bin/kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_interval: 20s


    nginx:
        image: nginx:latest
        restart: unless-stopped
        ports:
            - "80:80"
            - "443:443"

        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro

        depends_on:
            auth_service:
                condition: service_healthy
            file-upload-service:
                condition: service_healthy

        healthcheck:
            test: [ "CMD", "service", "nginx", "status" ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_interval: 10s